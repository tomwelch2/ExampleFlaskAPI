import json
import pandas as pd
import jwt
import uuid
import werkzeug.security as werkzeug
from sqlalchemy import create_engine
from flask import Flask, request
from flask_restful import Resource, Api
from flask_httpauth import HTTPBasicAuth
from flask_caching import Cache
from time import sleep
from functools import wraps

sleep(25) #Allows setup script to run before allowing querying to DB 


#Connecting to DB and extracting data ---

URL = "mysql+pymysql://root:root@mysql:3306/company"

engine = create_engine(URL)

emp_df = pd.read_sql("SELECT * FROM employees", con = engine).to_dict(orient = "records") #Data being returned by API

users_df = pd.read_sql("SELECT * FROM users", con = engine).to_dict(orient = "records")
usernames = [user["username"] for user in users_df]
passwords = [user["password"] for user in users_df]

#Creating API and endpoints ---

app = Flask(__name__)
auth = HTTPBasicAuth()
api = Api(app)
app.config["SECRET_KEY"] = str(uuid.uuid4())

CACHE_CONFIG = {
    "CACHE_TYPE": "redis",
    "CACHE_REDIS_URL": "redis://redis:6379",
    "CACHE_REDIS_HOST": "redis",
    "CACHE_REDIS_PORT": 6379
}


cache = Cache(app, config = CACHE_CONFIG)



@auth.verify_password
def verify_password(username, password):
    """Verifies username and password supplied in the /login
       endpoint by checking if they were entered, then if they
       are within the database of valid usernames and passwords.
 
       @username: str - Username supplied in /login endpoint
       @password: str - Password supplied in /login endpoint
     """
    if not (username and password):
        return False
    
    if username in usernames and password in passwords:
        return True



class Login(Resource):
    @auth.login_required
    def get(self):
        """Function allows user to login with a Username and Password, then
           generates a JWT token which is encoded and returned to the user
           as JSON.
        """
        token = jwt.encode({
            "user": request.authorization.get("username")
        }, app.config["SECRET_KEY"])

        global hash_token
        hash_token = werkzeug.generate_password_hash(token, "sha256")

        return {"Token": hash_token}


def verify_token(f):
    """"Verifies token given in the /all endpoint, checking if it was
        supplied and if it matches the token generated by the Login class"""
    @wraps(f)
    def decorator(*args, **kwargs):
        received_token = request.args.get("token", None)
        
        if not received_token or received_token != hash_token:
            return {"Error": "Invalid or missing API key"}
        
        return f(*args, **kwargs)
    
    return decorator
        

class allData(Resource):
    @verify_token
    @cache.memoize(timeout=60)
    def get(self):
        """Endpoint returns all data from database."""
        return emp_df



api.add_resource(allData, "/all")
api.add_resource(Login, '/login')

if __name__ == "__main__":
    app.run(host = "0.0.0.0", port = 5000)
